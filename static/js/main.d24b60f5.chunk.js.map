{"version":3,"sources":["constants/constants.js","models/Weather.js","helpers/WeatherParamsFormatter.js","components/Weather.js","components/WeatherComparision.js","components/Search.js","pages/CityWeather.js","containers/CityWeatherContainer.js","actions/weatherActionCreators.js","actions/weatherActionTypes.js","serviceWorker.js","models/WeatherComparisionResult.js","services/WeatherComparisionService.js","reducers/weatherReducer.js","reducers/rootReducer.js","index.js","configureStore.js"],"names":["MOST_POPULAR_CITIES","Weather","Record","cityID","cityName","description","icon","temperature","feelsLike","pressure","humidity","windSpeed","formatWeatherParam","value","symbol","toFixed","WeatherImage","styled","Image","props","weather","Box","direction","margin","right","top","justify","alignSelf","Heading","textAlign","get","src","fit","Text","size","Paragraph","List","primaryKey","secondaryKey","data","name","WeatherPositiveChange","span","theme","global","colors","WeatherNegativeChange","weatherComparision","ResponsiveContext","Consumer","textSize","style","fontSize","Table","TableHeader","TableRow","TableCell","scope","border","TableBody","valueSeq","map","comparision","key","getIn","formatComparisionResultParam","parseFloat","Search","hasError","React","useState","setValue","history","useHistory","onSearchClick","push","pathname","pad","align","height","flex","width","bottom","TextInput","placeholder","onChange","event","target","Button","onClick","primary","label","left","color","CityWeather","onInitialize","onWeatherComparisionInitialize","city","useParams","useEffect","isWeatherCoparisionAvailable","count","fill","basis","WeatherComparision","CityWeatherPage","connect","state","weatherReducer","dispatch","type","fetch","then","response","ok","json","Error","id","main","temp","feels_like","wind","speed","catch","cities","cityIndex","findIndex","splice","join","list","loadMostPopularCitiesWeatherData","Boolean","window","location","hostname","match","WeatherComparisionResult","compareWeather","weatherToCompare","locations","compareParams","paramA","paramB","initialState","Map","combineReducers","action","set","forEach","setIn","result","console","log","store","preloadedState","middlewares","thunkMiddleware","loggerMiddleware","middlewareEnhancer","applyMiddleware","createStore","rootReducer","configureStore","ReactDOM","render","Grommet","font","family","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d24b60f5.chunk.js","sourcesContent":["export const MOST_POPULAR_CITIES = [\n  756135,\n  3093133,\n  3099434,\n  3094802,\n  7530858\n]\n\nexport const CELSIUS_SYMBOL = '℃'\nexport const PRESSURE_SYMBOL = 'hPa'\nexport const HUMIDITY_SYMBOL = '%'\nexport const WIND_SPEED_SYMBOL = 'km/h'\n","import { Record } from 'immutable'\nexport default class Weather extends Record({\n  cityID: null,\n  cityName: null,\n  description: null,\n  icon: null,\n  temperature: null,\n  feelsLike: null,\n  pressure: null,\n  humidity: null,\n  windSpeed: null\n}) {}\n","export default function formatWeatherParam (value, symbol = '') {\n  return `${value.toFixed(1)} ${symbol}`\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport WeatherModel from '../models/Weather'\nimport styled from 'styled-components'\nimport formatWeatherParam from '../helpers/WeatherParamsFormatter'\nimport { CELSIUS_SYMBOL, HUMIDITY_SYMBOL, PRESSURE_SYMBOL, WIND_SPEED_SYMBOL } from '../constants/constants'\nimport { Box, Heading, Paragraph, Image, Text, List } from 'grommet'\n\nconst WeatherImage = styled(Image)`\n  flex: 0 0 auto;\n`\n\nWeather.propTypes = {\n  weather: PropTypes.instanceOf(WeatherModel)\n}\n\nfunction Weather (props) {\n  const { weather } = props\n\n  return (\n    <Box direction='column' margin={{ right: 'medium', top: 'medium' }} justify='center' alignSelf='start'>\n      <Box>\n        <Heading textAlign='center' margin='none'>{weather.get('cityName')}</Heading>\n        <Box direction='row' justify='center'>\n          <WeatherImage src={`https://openweathermap.org/img/wn/${weather.get('icon')}@2x.png`} fit='contain' />\n          <Text alignSelf='center' size='xxlarge'>{weather.get('temperature').toFixed(1)} ℃</Text>\n        </Box>\n        <Paragraph textAlign='center'>{weather.get('description')}</Paragraph>\n      </Box>\n      <List\n        primaryKey='name'\n        secondaryKey='value'\n        data={[\n          { name: 'Temperatura odczuwalna', value: formatWeatherParam(weather.get('feelsLike'), CELSIUS_SYMBOL) },\n          { name: 'Ciśnienie', value: formatWeatherParam(weather.get('pressure'), PRESSURE_SYMBOL) },\n          { name: 'Wilgotność', value: formatWeatherParam(weather.get('humidity'), HUMIDITY_SYMBOL) },\n          { name: 'Siła wiatru', value: formatWeatherParam(weather.get('windSpeed'), WIND_SPEED_SYMBOL) }\n        ]}\n      />\n    </Box>\n  )\n}\n\nexport default Weather\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Map } from 'immutable'\nimport styled from 'styled-components'\nimport { Box, Table, TableHeader, TableRow, TableCell, TableBody, ResponsiveContext, Text } from 'grommet'\nimport formatWeatherParam from '../helpers/WeatherParamsFormatter'\nimport { CELSIUS_SYMBOL, HUMIDITY_SYMBOL, PRESSURE_SYMBOL, WIND_SPEED_SYMBOL } from '../constants/constants'\n\nconst WeatherPositiveChange = styled.span`\n  color: ${props => props.theme.global.colors['neutral-1']};\n`\n\nconst WeatherNegativeChange = styled.span`\n  color: ${props => props.theme.global.colors['neutral-4']};\n`\n\nWeather.propTypes = {\n  weatherComparision: PropTypes.instanceOf(Map).isRequired\n}\n\nfunction Weather (props) {\n  const { weatherComparision } = props\n\n  return (\n    <ResponsiveContext.Consumer>\n      {(size) => {\n        const textSize = size === 'large' ? 'medium' : 'small'\n        return (\n          <Box direction='column' margin={{ top: 'auto' }} style={{ fontSize: size === 'large' ? '18px' : '14px' }}>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableCell scope='col' border='bottom'>\n                                        Nazwa miejscowości\n                  </TableCell>\n                  <TableCell scope='col' border='bottom'>\n                                        Temperatura\n                  </TableCell>\n                  <TableCell scope='col' border='bottom'>\n                                        Temperatura odczuwalna\n                  </TableCell>\n                  <TableCell scope='col' border='bottom'>\n                                        Ciśnienie\n                  </TableCell>\n                  <TableCell scope='col' border='bottom'>\n                                        Wilgotność\n                  </TableCell>\n                  <TableCell scope='col' border='bottom'>\n                                        Siła wiatru\n                  </TableCell>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {\n                  weatherComparision.valueSeq().map((comparision) => {\n                    return (\n                      <TableRow key={comparision.getIn(['weatherToCompare', 'cityID'])}>\n                        <TableCell scope='row'>\n                          <strong>{comparision.getIn(['weatherToCompare', 'cityName'])}</strong>\n                        </TableCell>\n                        <TableCell scope='row'>\n                          <strong>\n                            <Text size={textSize} margin={{ right: 'xsmall' }}>{formatWeatherParam(comparision.getIn(['weatherToCompare', 'temperature']), CELSIUS_SYMBOL)}</Text>\n                            <Text size={textSize} margin={{ right: 'xsmall' }}>{formatComparisionResultParam(comparision.getIn(['result', 'temperature']), CELSIUS_SYMBOL)}</Text>\n                          </strong>\n                        </TableCell>\n                        <TableCell scope='row'>\n                          <strong>\n                            <strong>\n                              <Text size={textSize} margin={{ right: 'xsmall' }}>{formatWeatherParam(comparision.getIn(['weatherToCompare', 'feelsLike']), CELSIUS_SYMBOL)}</Text>\n                              <Text size={textSize} margin={{ right: 'xsmall' }}>{formatComparisionResultParam(comparision.getIn(['result', 'feelsLike']), CELSIUS_SYMBOL)}</Text>\n                            </strong>\n                          </strong>\n                        </TableCell>\n                        <TableCell scope='row'>\n                          <strong>\n                            <Text size={textSize} margin={{ right: 'xsmall' }}>{formatWeatherParam(comparision.getIn(['weatherToCompare', 'pressure']), PRESSURE_SYMBOL)}</Text>\n                            <Text size={textSize} margin={{ right: 'xsmall' }}>{formatComparisionResultParam(comparision.getIn(['result', 'pressure']), PRESSURE_SYMBOL)}</Text>\n                          </strong>\n                        </TableCell>\n                        <TableCell scope='row'>\n                          <strong>\n                            <Text size={textSize} margin={{ right: 'xsmall' }}>{formatWeatherParam(comparision.getIn(['weatherToCompare', 'humidity']), HUMIDITY_SYMBOL)}</Text>\n                            <Text size={textSize} margin={{ right: 'xsmall' }}>{formatComparisionResultParam(comparision.getIn(['result', 'humidity']), HUMIDITY_SYMBOL)}</Text>\n                          </strong>\n                        </TableCell>\n                        <TableCell scope='row'>\n                          <strong>\n                            <Text size={textSize} margin={{ right: 'xsmall' }}>{formatWeatherParam(comparision.getIn(['weatherToCompare', 'windSpeed']), WIND_SPEED_SYMBOL)}</Text>\n                            <Text size={textSize} margin={{ right: 'xsmall' }}>{formatComparisionResultParam(comparision.getIn(['result', 'windSpeed']), WIND_SPEED_SYMBOL)}</Text>\n                          </strong>\n                        </TableCell>\n                      </TableRow>\n                    )\n                  })\n                }\n              </TableBody>\n            </Table>\n          </Box>)\n      }}\n    </ResponsiveContext.Consumer>\n\n  )\n}\n\nexport default Weather\n\nfunction formatComparisionResultParam (value, symbol = '') {\n  if (value === 0) {\n    return '(B/Z)'\n  }\n  value = value.toFixed(1)\n\n  return parseFloat(value) > 0 ? <WeatherPositiveChange>{`(+ ${value} ${symbol})`}</WeatherPositiveChange> : <WeatherNegativeChange>{`(${value} ${symbol})`}</WeatherNegativeChange>\n}\n","import React from 'react'\nimport {\n  Box,\n  TextInput,\n  Button,\n  ResponsiveContext,\n  Text\n} from 'grommet'\nimport { useHistory } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nSearch.propTypes = {\n  hasError: PropTypes.bool.isRequired\n}\n\nfunction Search (props) {\n  const { hasError } = props\n  const [value, setValue] = React.useState('')\n  const history = useHistory()\n\n  const onSearchClick = () => {\n    history.push({\n      pathname: value\n    })\n  }\n\n  return (\n    <ResponsiveContext.Consumer>\n      {size => (\n        <>\n          <Box direction='column' size='large' pad='medium' justify='center' align='center' height={size === 'large' ? 'small' : 'auto'} flex='grow'>\n            <Box direction='row' width='large' margin={{ bottom: hasError ? '0' : 'large' }}>\n              <Box width='large'>\n                <TextInput\n                  placeholder='Wpisz nazwę miejscowości'\n                  value={value}\n                  onChange={event => setValue(event.target.value)}\n                />\n              </Box>\n              <Button\n                onClick={onSearchClick} primary size={size !== 'small' ? 'large' : 'medium'} label='Szukaj' margin={{\n                  left: 'small'\n                }}\n              />\n            </Box>\n            {hasError &&\n              <Box width='large' height='xxsmall' pad='small'>\n                <Text color='status-critical'>Miejscowość nie została znaleziona - proszę spróbować ponownie</Text>\n              </Box>}\n          </Box>\n        </>)}\n    </ResponsiveContext.Consumer>\n  )\n}\n\nexport default Search\n","import React, { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { useParams } from 'react-router-dom'\nimport Weather from '../components/Weather'\nimport WeatherModel from '../models/Weather'\nimport WeatherComparision from '../components/WeatherComparision'\nimport Search from '../components/Search'\nimport { Map } from 'immutable'\nimport { Box, ResponsiveContext } from 'grommet'\n\nCityWeather.propTypes = {\n  onInitialize: PropTypes.func.isRequired,\n  onWeatherComparisionInitialize: PropTypes.func.isRequired,\n  weather: PropTypes.instanceOf(WeatherModel),\n  weatherComparision: PropTypes.instanceOf(Map),\n  hasError: PropTypes.bool.isRequired\n}\n\nfunction CityWeather (props) {\n  const { onInitialize, onWeatherComparisionInitialize, weather, weatherComparision, hasError } = props\n  const { city } = useParams()\n\n  useEffect(() => {\n    if (city) {\n      onInitialize(city)\n    }\n  }, [city, onInitialize])\n\n  const cityID = weather === null ? null : weather.get('cityID')\n\n  useEffect(() => {\n    if (cityID) {\n      onWeatherComparisionInitialize(cityID)\n    }\n  }, [cityID, onWeatherComparisionInitialize])\n\n  const isWeatherCoparisionAvailable = !!weatherComparision.count()\n\n  return (\n    <ResponsiveContext.Consumer>\n      {size => (\n        <Box fill direction={size !== 'large' ? 'column' : 'row'} justify='center'>\n          {weather &&\n            <Box direction='row' justify='center' basis={size !== 'small' ? '500px' : 'auto'}>\n              <Weather weather={weather} />\n            </Box>}\n          <Box flex direction={isWeatherCoparisionAvailable ? 'column' : 'row'}>\n            <Search hasError={hasError} />\n            {isWeatherCoparisionAvailable && <WeatherComparision weatherComparision={weatherComparision} />}\n          </Box>\n        </Box>)}\n    </ResponsiveContext.Consumer>\n  )\n}\n\nexport default CityWeather\n","import { connect } from 'react-redux'\nimport { loadWeatherData, loadMostPopularCitiesWeatherData } from '../actions/weatherActionCreators'\nimport CityWeather from '../pages/CityWeather'\n\nconst mapStateToProps = (state) => {\n  const { weatherReducer } = state\n\n  return {\n    weather: weatherReducer.get('weather'),\n    weatherComparision: weatherReducer.get('weatherComparision'),\n    hasError: weatherReducer.get('hasError')\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onInitialize: (city) => {\n      dispatch(loadWeatherData(city))\n    },\n    onWeatherComparisionInitialize: (cityID) => {\n      dispatch(loadMostPopularCitiesWeatherData(cityID))\n    }\n  }\n}\n\nconst CityWeatherPage = connect(mapStateToProps, mapDispatchToProps)(CityWeather)\n\nexport default CityWeatherPage\n","import {\n  LOAD_WEATHER_DATA_FAILURE,\n  LOAD_WEATHER_DATA_REQUEST,\n  LOAD_WEATHER_DATA_SUCCESS,\n  LOAD_MOST_POPULAR_CITIES_WEATHER_DATA_REQUEST,\n  LOAD_MOST_POPULAR_CITIES_WEATHER_DATA_SUCCESS,\n  LOAD_MOST_POPULAR_CITIES_WEATHER_DATA_FAILURE\n} from './weatherActionTypes'\nimport { MOST_POPULAR_CITIES } from '../constants/constants'\nimport Weather from '../models/Weather'\nimport fetch from 'cross-fetch'\nimport { List } from 'immutable'\n\nexport function loadWeatherData (cityName) {\n  return function (dispatch) {\n    dispatch({\n      type: LOAD_WEATHER_DATA_REQUEST\n    })\n\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=pl&units=metric&appid=817459b6a4fa2fee0fbb561b73d3e4aa`)\n      .then((response) => {\n        if (response.ok) {\n          return response.json()\n        } else {\n          throw new Error('Something went wrong')\n        }\n      })\n      .then(data => {\n        return dispatch({\n          type: LOAD_WEATHER_DATA_SUCCESS,\n          weather: new Weather({\n            cityID: data.id,\n            cityName: data.name,\n            description: data.weather[0].description,\n            icon: data.weather[0].icon,\n            temperature: data.main.temp,\n            feelsLike: data.main.feels_like,\n            pressure: data.main.pressure,\n            humidity: data.main.humidity,\n            windSpeed: data.wind.speed\n          })\n        })\n      })\n      .catch(() => {\n        return dispatch({\n          type: LOAD_WEATHER_DATA_FAILURE\n        })\n      })\n  }\n}\n\nexport function loadMostPopularCitiesWeatherData (cityID) {\n  return function (dispatch) {\n    dispatch({\n      type: LOAD_MOST_POPULAR_CITIES_WEATHER_DATA_REQUEST\n    })\n\n    const cities = [...MOST_POPULAR_CITIES]\n    const cityIndex = MOST_POPULAR_CITIES.findIndex((id) => {\n      return id === cityID\n    })\n\n    if (cityIndex !== -1) {\n      cities.splice(cityIndex, 1)\n    }\n\n    fetch(`https://api.openweathermap.org/data/2.5/group?id=${cities.join(',')}&units=metric&lang=pl&appid=817459b6a4fa2fee0fbb561b73d3e4aa`)\n      .then((response) => {\n        if (response.ok) {\n          return response.json()\n        } else {\n          throw new Error('Something went wrong')\n        }\n      })\n      .then(data => {\n        return dispatch({\n          type: LOAD_MOST_POPULAR_CITIES_WEATHER_DATA_SUCCESS,\n          weather: new List(data.list.map((data) => {\n            return new Weather({\n              cityID: data.id,\n              cityName: data.name,\n              description: data.weather.description,\n              icon: data.weather.icon,\n              temperature: data.main.temp,\n              feelsLike: data.main.feels_like,\n              pressure: data.main.pressure,\n              humidity: data.main.humidity,\n              windSpeed: data.wind.speed\n            })\n          }))\n        })\n      })\n      .catch(() => {\n        return dispatch({\n          type: LOAD_MOST_POPULAR_CITIES_WEATHER_DATA_FAILURE\n        })\n      })\n  }\n}\n","export const LOAD_WEATHER_DATA_REQUEST = 'LOAD_WEATHER_DATA_REQUEST'\nexport const LOAD_WEATHER_DATA_SUCCESS = 'LOAD_WEATHER_DATA_SUCCESS'\nexport const LOAD_WEATHER_DATA_FAILURE = 'LOAD_WEATHER_DATA_FAILURE'\nexport const LOAD_MOST_POPULAR_CITIES_WEATHER_DATA_REQUEST = 'LOAD_MOST_POPULAR_CITIES_WEATHER_DATA_REQUEST'\nexport const LOAD_MOST_POPULAR_CITIES_WEATHER_DATA_SUCCESS = 'LOAD_MOST_POPULAR_CITIES_WEATHER_DATA_SUCCESS'\nexport const LOAD_MOST_POPULAR_CITIES_WEATHER_DATA_FAILURE = 'LOAD_MOST_POPULAR_CITIES_WEATHER_DATA_FAILURE'\n","import fetch from 'cross-fetch'\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import { Record } from 'immutable'\n\nexport default class WeatherComparisionResult extends Record({\n  cityID: null,\n  cityName: null,\n  temperature: null,\n  feelsLike: null,\n  pressure: null,\n  humidity: null,\n  windSpeed: null\n}) { }\n","import WeatherComparisionResult from '../models/WeatherComparisionResult'\nimport { List } from 'immutable'\n\nexport function compareWeather (weatherToCompare, locations = new List()) {\n  return locations.map((weather) => {\n    return new WeatherComparisionResult({\n      cityID: weather.get('cityID'),\n      cityName: weather.get('cityName'),\n      temperature: compareParams(weather.get('temperature'), weatherToCompare.get('temperature')),\n      feelsLike: compareParams(weather.get('feelsLike'), weatherToCompare.get('feelsLike')),\n      pressure: compareParams(weather.get('pressure'), weatherToCompare.get('pressure')),\n      humidity: compareParams(weather.get('humidity'), weatherToCompare.get('humidity')),\n      windSpeed: compareParams(weather.get('windSpeed'), weatherToCompare.get('windSpeed'))\n    })\n  })\n}\n\nfunction compareParams (paramA, paramB) {\n  return parseFloat((parseFloat(paramA.toFixed(1)) - parseFloat(paramB.toFixed(1))).toFixed(1))\n}\n","import {\n  LOAD_WEATHER_DATA_REQUEST,\n  LOAD_WEATHER_DATA_SUCCESS,\n  LOAD_MOST_POPULAR_CITIES_WEATHER_DATA_SUCCESS,\n  LOAD_WEATHER_DATA_FAILURE\n} from '../actions/weatherActionTypes'\nimport { Map } from 'immutable'\nimport { compareWeather } from '../services/WeatherComparisionService'\n\nconst initialState = new Map({\n  weather: null,\n  weatherComparision: new Map(),\n  hasError: false\n})\n\nexport default function weather (state = initialState, action) {\n  switch (action.type) {\n    case LOAD_WEATHER_DATA_REQUEST:\n      return state\n    case LOAD_WEATHER_DATA_SUCCESS:\n      return state.set('weather', action.weather).set('hasError', false)\n    case LOAD_WEATHER_DATA_FAILURE:\n      return state.set('hasError', true)\n    case LOAD_MOST_POPULAR_CITIES_WEATHER_DATA_SUCCESS: {\n      let weatherComparision = new Map()\n\n      action.weather.forEach((weather) => {\n        weatherComparision = weatherComparision.setIn([weather.get('cityID'), 'weatherToCompare'], weather)\n      })\n\n      compareWeather(state.get('weather'), action.weather).forEach((result) => {\n        console.log(result)\n        weatherComparision = weatherComparision.setIn([result.get('cityID'), 'result'], result)\n      })\n\n      return state.set('weatherComparision', weatherComparision)\n    }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport weatherReducer from './weatherReducer'\n\nexport default combineReducers({\n  weatherReducer\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Grommet } from 'grommet'\nimport CityWeatherPage from './containers/CityWeatherContainer'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport configureStore from './configureStore'\n\nconst theme = {\n  global: {\n    font: {\n      family: 'Cinzel',\n      size: '18px',\n      height: '20px'\n    }\n  }\n}\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <Grommet theme={theme}>\n        <Switch>\n          <Route path='/:city?'>\n            <CityWeatherPage />\n          </Route>\n        </Switch>\n      </Grommet>\n    </Router>\n  </Provider>\n  ,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { applyMiddleware, createStore } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport loggerMiddleware from 'redux-logger'\nimport rootReducer from './reducers/rootReducer'\n\nexport default function configureStore (preloadedState) {\n  const middlewares = [thunkMiddleware, loggerMiddleware]\n  const middlewareEnhancer = applyMiddleware(...middlewares)\n\n  return createStore(rootReducer, preloadedState, middlewareEnhancer)\n}\n"],"sourceRoot":""}